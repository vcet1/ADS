

    import pandas as pd
    import numpy as np
    import scipy as sc
    import seaborn as sns
    from scipy import stats

    bmi = pd.read_csv('/content/bmi.csv')

    bmi.head(10)

    {"summary":"{\n  \"name\": \"bmi\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 147,\n        \"max\": 189,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          189,\n          177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 61,\n        \"max\": 90,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          80,\n          87\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6394970059548175,\n        \"min\": 22.3,\n        \"max\": 30.1,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          26.1,\n          24.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 25,\n        \"max\": 32,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          27,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"bmi"}

Measure Of Central Tendency

    bmi.mean()

    <ipython-input-122-d365ae6a4e0d>:1: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
      bmi.mean()

    Height    168.222222
    Weight     73.888889
    bmi        26.177778
    Age        28.333333
    dtype: float64

    bmi.median()

    <ipython-input-123-f164f694bdf7>:1: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
      bmi.median()

    Height    174.0
    Weight     70.0
    bmi        26.1
    Age        28.0
    dtype: float64

    bmi['Gender'].mode()

    0    Male
    Name: Gender, dtype: object

Measure of Spread

    #VARIANCE
    bmi.var()

    <ipython-input-125-23e5371e114f>:2: FutureWarning: The default value of numeric_only in DataFrame.var is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
      bmi.var()

    Height    236.194444
    Weight    115.361111
    bmi         6.966944
    Age         5.500000
    dtype: float64

    #STANDARD DEVIATION
    bmi.std()

    <ipython-input-126-5e72bfc93f66>:2: FutureWarning: The default value of numeric_only in DataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
      bmi.std()

    Height    15.368619
    Weight    10.740629
    bmi        2.639497
    Age        2.345208
    dtype: float64

    #MAX
    maxInd = bmi.max()
    print(max)

    Gender    Male
    Height     189
    Weight      90
    bmi       30.1
    Age         32
    dtype: object

    #MIN
    minInd = bmi.min()
    print(min)

    Gender    Female
    Height       147
    Weight        61
    bmi         22.3
    Age           25
    dtype: object

    #RANGE
    Range = maxInd.drop('Gender')- minInd.drop('Gender')
    print(Range)

    Height     42
    Weight     29
    bmi       7.8
    Age         7
    dtype: object

    #LOWER QURTILE
    Q1 = bmi.quantile(0.25)
    print(Q1)

    Height    154.0
    Weight     65.0
    bmi        24.4
    Age        27.0
    Name: 0.25, dtype: float64

    <ipython-input-130-bcbd70d46a84>:2: FutureWarning: The default value of numeric_only in DataFrame.quantile is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
      Q1 = bmi.quantile(0.25)

    #UPPER QURTILE
    Q3 = bmi.quantile(0.75)
    print(Q3)

    Height    177.0
    Weight     80.0
    bmi        27.5
    Age        30.0
    Name: 0.75, dtype: float64

    <ipython-input-131-9c39cdfde05f>:2: FutureWarning: The default value of numeric_only in DataFrame.quantile is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
      Q3 = bmi.quantile(0.75)

    #IQR
    IQR = Q3-Q1
    print(IQR)

    Height    23.0
    Weight    15.0
    bmi        3.1
    Age        3.0
    dtype: float64

    Q2 = bmi.median()
    print(Q2)

    Height    174.0
    Weight     70.0
    bmi        26.1
    Age        28.0
    dtype: float64

    <ipython-input-133-8035b9ea4505>:1: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
      Q2 = bmi.median()

    sns.boxplot(x = bmi['Age'])

    <Axes: xlabel='Age'>

[]

    sns.boxplot(x = bmi['Age'],y=bmi['Gender'])

    <Axes: xlabel='Age', ylabel='Gender'>

[]

#Measure of Shape

    std_deviation = bmi['Age'].std()
    kurtosis = bmi['Age'].kurtosis()
    skew = bmi['Age'].skew()
    mean = bmi['Age'].mean()

    DQ = std_deviation/mean
    harmonic_mean = stats.hmean(bmi['Age'])
    risk = harmonic_mean/mean

    print('Standard-Deviation:-',std_deviation)
    print('kurtosis:-',kurtosis)
    print('skew:-',skew)
    print('DQ:-',DQ)
    print('risk:-',risk)

    Standard-Deviation:- 2.345207879911715
    kurtosis:- -1.041322314049585
    skew:- 0.232582599660668
    DQ:- 0.08277204282041346
    risk:- 0.993970111565506

    zscore=stats.zscore(bmi['Age'])
    print(zscore)

    0   -1.507557
    1   -0.603023
    2    0.753778
    3   -1.055290
    4   -0.150756
    5    0.301511
    6    1.206045
    7    1.658312
    8   -0.603023
    Name: Age, dtype: float64
